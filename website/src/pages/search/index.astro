---
import { getData, SearchStatus } from './search';
import { ErrorFeedback } from '../../components/SearchPage/ErrorFeedback';
import { Pagination } from '../../components/SearchPage/Pagination';
import { SearchForm } from '../../components/SearchPage/SearchForm';
import { Table } from '../../components/SearchPage/Table';
import { getConfig } from '../../config';
import BaseLayout from '../../layouts/BaseLayout.astro';
import type { Filter } from '../../types';

const config = getConfig();
const getSearchParams = (field: string): string => {
    return Astro.url.searchParams.get(field) ?? '';
};

const metadataSettings: Filter[] = config.schema.metadata.flatMap((metadata) => {
    if (metadata.type === 'date') {
        const metadataFrom = {
            ...metadata,
            name: `${metadata.name}From`,
            filter: getSearchParams(`${metadata.name}From`),
        };
        const metadataTo = {
            ...metadata,
            name: `${metadata.name}To`,
            filter: getSearchParams(`${metadata.name}To`),
        };
        return [metadataFrom, metadataTo];
    } else {
        const metadataSetting: Filter = {
            ...metadata,
            filter: getSearchParams(metadata.name),
        };
        return [metadataSetting];
    }
});

const pageSize = 100;
const pageParam = Astro.url.searchParams.get('page');
const page = pageParam !== null ? Number.parseInt(pageParam, 10) : 1;
const offset = (page - 1) * pageSize;

const data = await getData(metadataSettings, offset, pageSize);
---

<BaseLayout title='Search'>
    <h1 class='title'>Search</h1>
    <div class='flex flex-col md:flex-row gap-8 md:gap-4'>
        {
            data.status === SearchStatus.ERROR ? (
                <ErrorFeedback message='Error while fetching data' client:only='react' />
            ) : null
        }

        <div class='md:w-72'>
            <SearchForm metadataSettings={metadataSettings} config={config} client:only='react' />
        </div>

        <div class='flex-1'>
            {
                data.status === SearchStatus.OK ? (
                    <>
                        <div class='mb-1'>
                            Search returned {data.totalCount.toLocaleString()}
                            sequence{data.totalCount === 1 ? '' : 's'}
                        </div>
                        <Table data={data.data} config={config} client:load />

                        <div class='mt-4 flex justify-center'>
                            <Pagination client:only='react' count={Math.ceil(data.totalCount / pageSize)} />
                        </div>
                    </>
                ) : null
            }
        </div>
    </div>
</BaseLayout>
